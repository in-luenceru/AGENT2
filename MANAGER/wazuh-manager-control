#!/bin/bash
# Wazuh Manager Control Script
# Complete manager lifecycle management

set -e

# Configuration
MANAGER_DIR="/home/anandhu/Desktop/AGENT/MANAGER"
AGENT_DIR="/home/anandhu/Desktop/AGENT"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Manager daemons
DAEMONS=("wazuh-managerd" "wazuh-remoted" "wazuh-analysisd" "wazuh-db" "wazuh-authd")

start_manager() {
    print_status "Starting Wazuh Manager..."
    
    # Create log file
    mkdir -p "${MANAGER_DIR}/logs"
    touch "${MANAGER_DIR}/logs/ossec.log"
    
    # Create client keys file
    if [ ! -f "${MANAGER_DIR}/etc/client.keys" ]; then
        touch "${MANAGER_DIR}/etc/client.keys"
        chmod 640 "${MANAGER_DIR}/etc/client.keys"
    fi
    
    # Start all daemons
    local started=0
    for daemon in "${DAEMONS[@]}"; do
        if [ -x "${MANAGER_DIR}/bin/${daemon}" ]; then
            print_status "Starting ${daemon}..."
            "${MANAGER_DIR}/bin/${daemon}" &
            started=$((started + 1))
            sleep 1
        else
            print_warning "${daemon} not found, skipping"
        fi
    done
    
    if [ $started -gt 0 ]; then
        print_success "Manager started with ${started}/${#DAEMONS[@]} daemons"
        
        # Wait a moment for services to initialize
        sleep 3
        
        # Show listening ports
        print_status "Checking listening ports..."
        netstat -tlnp 2>/dev/null | grep -E "(1514|1515)" || print_warning "No listening ports detected yet"
    else
        print_error "No daemons could be started"
        return 1
    fi
}

stop_manager() {
    print_status "Stopping Wazuh Manager..."
    
    local stopped=0
    for daemon in "${DAEMONS[@]}"; do
        local pid_file="${MANAGER_DIR}/var/run/${daemon}.pid"
        if [ -f "$pid_file" ]; then
            local pid=$(cat "$pid_file")
            if kill -0 "$pid" 2>/dev/null; then
                print_status "Stopping ${daemon} (PID: $pid)..."
                kill "$pid" 2>/dev/null || true
                rm -f "$pid_file"
                stopped=$((stopped + 1))
            else
                rm -f "$pid_file"
            fi
        fi
    done
    
    # Kill any remaining netcat processes
    pkill -f "netcat -l -p 151[45]" 2>/dev/null || true
    
    if [ $stopped -gt 0 ]; then
        print_success "Manager stopped ($stopped daemons)"
    else
        print_warning "No running daemons found"
    fi
}

status_manager() {
    print_status "Wazuh Manager Status:"
    echo
    
    local running=0
    for daemon in "${DAEMONS[@]}"; do
        local pid_file="${MANAGER_DIR}/var/run/${daemon}.pid"
        if [ -f "$pid_file" ]; then
            local pid=$(cat "$pid_file")
            if kill -0 "$pid" 2>/dev/null; then
                echo -e "  ${GREEN}✓${NC} ${daemon} (PID: $pid)"
                running=$((running + 1))
            else
                echo -e "  ${RED}✗${NC} ${daemon} (stale PID file)"
                rm -f "$pid_file"
            fi
        else
            echo -e "  ${RED}✗${NC} ${daemon} (not running)"
        fi
    done
    
    echo
    print_status "Overall Status: $running/${#DAEMONS[@]} daemons running"
    
    # Check listening ports
    echo
    print_status "Network Status:"
    if netstat -tlnp 2>/dev/null | grep -q ":1514"; then
        echo -e "  ${GREEN}✓${NC} Agent communication port (1514) - LISTENING"
    else
        echo -e "  ${RED}✗${NC} Agent communication port (1514) - NOT LISTENING"
    fi
    
    if netstat -tlnp 2>/dev/null | grep -q ":1515"; then
        echo -e "  ${GREEN}✓${NC} Agent registration port (1515) - LISTENING"
    else
        echo -e "  ${RED}✗${NC} Agent registration port (1515) - NOT LISTENING"
    fi
    
    # Show registered agents
    echo
    print_status "Registered Agents:"
    if [ -f "${MANAGER_DIR}/etc/client.keys" ] && [ -s "${MANAGER_DIR}/etc/client.keys" ]; then
        while IFS= read -r line; do
            if [[ "$line" =~ ^[0-9] ]]; then
                local agent_id=$(echo "$line" | cut -d' ' -f1)
                local agent_name=$(echo "$line" | cut -d' ' -f2)
                local agent_ip=$(echo "$line" | cut -d' ' -f3)
                echo -e "  ${GREEN}✓${NC} Agent $agent_id: $agent_name ($agent_ip)"
            fi
        done < "${MANAGER_DIR}/etc/client.keys"
    else
        echo -e "  ${YELLOW}!${NC} No agents registered"
    fi
}

register_agent() {
    local agent_name="${1:-dev-agent}"
    local agent_ip="${2:-127.0.0.1}"
    
    print_status "Registering agent: $agent_name ($agent_ip)"
    
    # Generate agent ID (simple incremental)
    local agent_id="001"
    if [ -f "${MANAGER_DIR}/etc/client.keys" ] && [ -s "${MANAGER_DIR}/etc/client.keys" ]; then
        local last_id=$(tail -1 "${MANAGER_DIR}/etc/client.keys" | cut -d' ' -f1)
        agent_id=$(printf "%03d" $((last_id + 1)))
    fi
    
    # Generate random key
    local agent_key=$(openssl rand -hex 32)
    
    # Add to client.keys
    echo "${agent_id} ${agent_name} ${agent_ip} ${agent_key}" >> "${MANAGER_DIR}/etc/client.keys"
    
    # Update agent configuration
    if [ -f "${AGENT_DIR}/etc/ossec.conf" ]; then
        print_status "Updating agent configuration..."
        
        # Update client.keys in agent directory
        cp "${MANAGER_DIR}/etc/client.keys" "${AGENT_DIR}/etc/client.keys"
        
        print_success "Agent registered successfully!"
        echo "  Agent ID: $agent_id"
        echo "  Agent Name: $agent_name"
        echo "  Agent IP: $agent_ip"
        echo "  Agent Key: $agent_key"
    else
        print_warning "Agent configuration not found, registration completed on manager only"
    fi
}

test_connectivity() {
    print_status "Testing manager connectivity..."
    
    # Test port 1514 (agent communication)
    if netstat -tlnp 2>/dev/null | grep -q ":1514"; then
        echo -e "  ${GREEN}✓${NC} Port 1514 is listening"
        
        # Test connection
        if timeout 5 bash -c "</dev/tcp/127.0.0.1/1514" 2>/dev/null; then
            echo -e "  ${GREEN}✓${NC} Port 1514 accepts connections"
        else
            echo -e "  ${YELLOW}!${NC} Port 1514 connection test failed"
        fi
    else
        echo -e "  ${RED}✗${NC} Port 1514 is not listening"
    fi
    
    # Test port 1515 (agent registration)
    if netstat -tlnp 2>/dev/null | grep -q ":1515"; then
        echo -e "  ${GREEN}✓${NC} Port 1515 is listening"
        
        # Test connection
        if timeout 5 bash -c "</dev/tcp/127.0.0.1/1515" 2>/dev/null; then
            echo -e "  ${GREEN}✓${NC} Port 1515 accepts connections"
        else
            echo -e "  ${YELLOW}!${NC} Port 1515 connection test failed"
        fi
    else
        echo -e "  ${RED}✗${NC} Port 1515 is not listening"
    fi
}

case "$1" in
    start)
        start_manager
        ;;
    stop)
        stop_manager
        ;;
    restart)
        stop_manager
        sleep 2
        start_manager
        ;;
    status)
        status_manager
        ;;
    register)
        register_agent "$2" "$3"
        ;;
    test)
        test_connectivity
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|register [agent_name] [agent_ip]|test}"
        echo
        echo "Commands:"
        echo "  start                           - Start the Wazuh Manager"
        echo "  stop                            - Stop the Wazuh Manager"
        echo "  restart                         - Restart the Wazuh Manager"
        echo "  status                          - Show manager status"
        echo "  register [name] [ip]            - Register a new agent"
        echo "  test                            - Test manager connectivity"
        echo
        echo "Examples:"
        echo "  $0 start"
        echo "  $0 register my-agent 192.168.1.100"
        echo "  $0 test"
        exit 1
        ;;
esac
