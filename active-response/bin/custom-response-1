#!/bin/bash
# Alert notification system
# Usage: alert-notify <action> <alert_info> <timeout>

LOCAL=$(dirname $0)
cd $LOCAL
cd ../

# Log configuration
LOG_FILE="/workspaces/AGENT2/logs/active-response.log"
ALERT_LOG="/workspaces/AGENT2/logs/security_alerts.log"

ACTION="$1"
ALERT_INFO="$2"
TIMEOUT="$3"

# Extract alert details
ALERT_LEVEL=$(echo "$ALERT_INFO" | grep -oE 'LEVEL:([0-9]+)' | cut -d: -f2)
ALERT_RULE=$(echo "$ALERT_INFO" | grep -oE 'RULE:([^,]+)' | cut -d: -f2)
ALERT_DESC=$(echo "$ALERT_INFO" | grep -oE 'DESC:([^,]+)' | cut -d: -f2)
SOURCE_IP=$(echo "$ALERT_INFO" | grep -oE 'SRCIP:([^,]+)' | cut -d: -f2)

# Notification function
send_notification() {
    local priority="$1"
    local message="$2"
    
    # Log to security alerts
    echo "$(date '+%Y/%m/%d %H:%M:%S') [$priority] $message" >> $ALERT_LOG
    
    # Send to syslog
    logger -p security.$priority -t wazuh-agent "$message"
    
    # Email notification for critical alerts
    if [ "$priority" = "crit" ] && command -v mail >/dev/null 2>&1; then
        echo "$message" | mail -s "WAZUH CRITICAL ALERT" admin@localhost 2>/dev/null
    fi
    
    # Slack/Teams webhook (if configured)
    if [ -f /workspaces/AGENT2/etc/webhook_config ]; then
        source /workspaces/AGENT2/etc/webhook_config
        if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"ðŸš¨ WAZUH ALERT: $message\"}" \
                "$SLACK_WEBHOOK" 2>/dev/null
        fi
    fi
}

# Alert processing
process_alert() {
    echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Processing alert: Level $ALERT_LEVEL - $ALERT_RULE" >> $LOG_FILE
    
    # Determine priority based on level
    if [ "$ALERT_LEVEL" -ge 12 ]; then
        PRIORITY="crit"
        URGENCY="CRITICAL"
    elif [ "$ALERT_LEVEL" -ge 8 ]; then
        PRIORITY="warning"
        URGENCY="HIGH"
    elif [ "$ALERT_LEVEL" -ge 5 ]; then
        PRIORITY="notice"
        URGENCY="MEDIUM"
    else
        PRIORITY="info"
        URGENCY="LOW"
    fi
    
    # Construct alert message
    MESSAGE="[$URGENCY] Security Event Detected"
    MESSAGE="$MESSAGE | Rule: $ALERT_RULE"
    MESSAGE="$MESSAGE | Level: $ALERT_LEVEL"
    if [ -n "$SOURCE_IP" ]; then
        MESSAGE="$MESSAGE | Source IP: $SOURCE_IP"
    fi
    if [ -n "$ALERT_DESC" ]; then
        MESSAGE="$MESSAGE | Description: $ALERT_DESC"
    fi
    MESSAGE="$MESSAGE | Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
    
    # Send notification
    send_notification "$PRIORITY" "$MESSAGE"
    
    # Additional actions based on alert level
    case "$ALERT_LEVEL" in
        15|14|13|12)
            # Critical - immediate response required
            echo "$(date '+%Y/%m/%d %H:%M:%S') [CRITICAL] Immediate response required for level $ALERT_LEVEL alert" >> $LOG_FILE
            
            # Trigger incident response
            if [ -f /workspaces/AGENT2/bin/incident_response.sh ]; then
                /workspaces/AGENT2/bin/incident_response.sh "$ALERT_RULE" "$SOURCE_IP" &
            fi
            ;;
        11|10|9|8)
            # High - escalate to security team
            echo "$(date '+%Y/%m/%d %H:%M:%S') [HIGH] Security team notification for level $ALERT_LEVEL alert" >> $LOG_FILE
            ;;
        7|6|5)
            # Medium - monitor and log
            echo "$(date '+%Y/%m/%d %H:%M:%S') [MEDIUM] Enhanced monitoring for level $ALERT_LEVEL alert" >> $LOG_FILE
            ;;
    esac
    
    # Store alert for tracking
    echo "$ALERT_LEVEL:$ALERT_RULE:$SOURCE_IP:$(date +%s)" >> /tmp/wazuh_security_alerts.txt
    
    echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] Alert processed and notifications sent" >> $LOG_FILE
}

# Main logic
case "$ACTION" in
    add)
        process_alert
        ;;
    delete)
        echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Delete action not applicable for notifications" >> $LOG_FILE
        ;;
    *)
        echo "$(date '+%Y/%m/%d %H:%M:%S') [ERROR] Invalid action: $ACTION" >> $LOG_FILE
        exit 1
        ;;
esac

exit 0