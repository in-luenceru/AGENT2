#!/bin/bash
# File quarantine for malicious files
# Usage: file-quarantine <action> <file_path> <timeout>

LOCAL=$(dirname $0)
cd $LOCAL
cd ../

# Log configuration
LOG_FILE="/workspaces/AGENT2/logs/active-response.log"
QUARANTINE_DIR="/workspaces/AGENT2/quarantine"

ACTION="$1"
FILE_PATH="$2"
TIMEOUT="$3"

# Ensure quarantine directory exists
mkdir -p "$QUARANTINE_DIR"

# Quarantine function
quarantine_file() {
    echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Quarantining file: $FILE_PATH" >> $LOG_FILE
    
    if [ -f "$FILE_PATH" ]; then
        # Create unique quarantine name
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        QUARANTINE_NAME="$(basename "$FILE_PATH")_${TIMESTAMP}"
        QUARANTINE_PATH="$QUARANTINE_DIR/$QUARANTINE_NAME"
        
        # Get file hash before moving
        FILE_HASH=$(sha256sum "$FILE_PATH" 2>/dev/null | cut -d' ' -f1)
        
        # Move file to quarantine
        mv "$FILE_PATH" "$QUARANTINE_PATH" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            # Store quarantine metadata
            echo "ORIGINAL_PATH:$FILE_PATH" > "$QUARANTINE_PATH.meta"
            echo "QUARANTINE_TIME:$(date +%s)" >> "$QUARANTINE_PATH.meta"
            echo "FILE_HASH:$FILE_HASH" >> "$QUARANTINE_PATH.meta"
            echo "TIMEOUT:$TIMEOUT" >> "$QUARANTINE_PATH.meta"
            
            # Set restrictive permissions
            chmod 000 "$QUARANTINE_PATH"
            
            # Store in tracking file
            echo "$FILE_PATH:$QUARANTINE_PATH:$(date +%s):$TIMEOUT" >> /tmp/wazuh_quarantined_files.txt
            
            echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] File quarantined: $FILE_PATH -> $QUARANTINE_PATH" >> $LOG_FILE
        else
            echo "$(date '+%Y/%m/%d %H:%M:%S') [ERROR] Failed to quarantine file: $FILE_PATH" >> $LOG_FILE
        fi
    else
        echo "$(date '+%Y/%m/%d %H:%M:%S') [WARNING] File not found: $FILE_PATH" >> $LOG_FILE
    fi
}

# Restore function
restore_file() {
    echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Restoring file: $FILE_PATH" >> $LOG_FILE
    
    # Find quarantined file
    QUARANTINE_PATH=$(grep "^$FILE_PATH:" /tmp/wazuh_quarantined_files.txt | cut -d: -f2)
    
    if [ -n "$QUARANTINE_PATH" ] && [ -f "$QUARANTINE_PATH" ]; then
        # Restore original permissions
        chmod 644 "$QUARANTINE_PATH"
        
        # Move back to original location
        mv "$QUARANTINE_PATH" "$FILE_PATH" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            # Remove metadata
            rm -f "$QUARANTINE_PATH.meta"
            
            # Remove from tracking file
            grep -v "^$FILE_PATH:" /tmp/wazuh_quarantined_files.txt > /tmp/wazuh_quarantined_files.tmp 2>/dev/null
            mv /tmp/wazuh_quarantined_files.tmp /tmp/wazuh_quarantined_files.txt 2>/dev/null
            
            echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] File restored: $FILE_PATH" >> $LOG_FILE
        else
            echo "$(date '+%Y/%m/%d %H:%M:%S') [ERROR] Failed to restore file: $FILE_PATH" >> $LOG_FILE
        fi
    else
        echo "$(date '+%Y/%m/%d %H:%M:%S') [WARNING] Quarantined file not found: $FILE_PATH" >> $LOG_FILE
    fi
}

# Main logic
case "$ACTION" in
    add)
        quarantine_file
        
        # Schedule automatic restore if timeout specified
        if [ -n "$TIMEOUT" ] && [ "$TIMEOUT" -gt 0 ]; then
            (sleep $TIMEOUT && $0 delete "$FILE_PATH") &
        fi
        ;;
    delete)
        restore_file
        ;;
    *)
        echo "$(date '+%Y/%m/%d %H:%M:%S') [ERROR] Invalid action: $ACTION" >> $LOG_FILE
        exit 1
        ;;
esac

exit 0