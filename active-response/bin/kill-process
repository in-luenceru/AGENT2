#!/bin/bash
# Kill suspicious processes
# Usage: kill-process <action> <process_info> <timeout>

LOCAL=$(dirname $0)
cd $LOCAL
cd ../

# Log configuration
LOG_FILE="/workspaces/AGENT2/logs/active-response.log"

ACTION="$1"
PROCESS_INFO="$2"
TIMEOUT="$3"

# Extract PID and process name from alert
PID=$(echo "$PROCESS_INFO" | grep -oE 'PID:([0-9]+)' | cut -d: -f2)
PROCESS_NAME=$(echo "$PROCESS_INFO" | grep -oE 'PROCESS:([^,]+)' | cut -d: -f2)

# Kill process function
kill_process() {
    echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Terminating suspicious process: PID=$PID NAME=$PROCESS_NAME" >> $LOG_FILE
    
    # Verify process exists
    if [ -n "$PID" ] && kill -0 "$PID" 2>/dev/null; then
        # Get process details before killing
        PROC_DETAILS=$(ps -p $PID -o pid,ppid,user,comm,args 2>/dev/null)
        echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Process details: $PROC_DETAILS" >> $LOG_FILE
        
        # Try graceful termination first
        kill -TERM "$PID" 2>/dev/null
        sleep 2
        
        # Force kill if still running
        if kill -0 "$PID" 2>/dev/null; then
            kill -KILL "$PID" 2>/dev/null
            echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] Force killed process PID=$PID" >> $LOG_FILE
        else
            echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] Gracefully terminated process PID=$PID" >> $LOG_FILE
        fi
        
        # Store killed process info
        echo "$PID:$PROCESS_NAME:$(date +%s)" >> /tmp/wazuh_killed_processes.txt
        
    elif [ -n "$PROCESS_NAME" ]; then
        # Kill by name if PID not available
        PIDS=$(pgrep -f "$PROCESS_NAME")
        for pid in $PIDS; do
            echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Killing process by name: $PROCESS_NAME (PID=$pid)" >> $LOG_FILE
            kill -KILL "$pid" 2>/dev/null
            echo "$pid:$PROCESS_NAME:$(date +%s)" >> /tmp/wazuh_killed_processes.txt
        done
        echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] Killed processes matching: $PROCESS_NAME" >> $LOG_FILE
    else
        echo "$(date '+%Y/%m/%d %H:%M:%S') [ERROR] No valid PID or process name found" >> $LOG_FILE
    fi
}

# Validate process safety
is_system_critical() {
    CRITICAL_PROCESSES="init systemd kernel kthreadd ksoftirqd migration watchdog sshd NetworkManager"
    for proc in $CRITICAL_PROCESSES; do
        if echo "$PROCESS_NAME" | grep -qi "$proc"; then
            return 0
        fi
    done
    return 1
}

# Main logic
case "$ACTION" in
    add)
        if is_system_critical; then
            echo "$(date '+%Y/%m/%d %H:%M:%S') [WARNING] Skipping critical system process: $PROCESS_NAME" >> $LOG_FILE
        else
            kill_process
        fi
        ;;
    delete)
        echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Delete action not applicable for killed processes" >> $LOG_FILE
        ;;
    *)
        echo "$(date '+%Y/%m/%d %H:%M:%S') [ERROR] Invalid action: $ACTION" >> $LOG_FILE
        exit 1
        ;;
esac

exit 0