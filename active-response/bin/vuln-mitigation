#!/bin/bash
# Vulnerability mitigation script
# Usage: vuln-mitigation <action> <vulnerability_info> <timeout>

LOCAL=$(dirname $0)
cd $LOCAL
cd ../

# Log configuration
LOG_FILE="/workspaces/AGENT2/logs/active-response.log"

ACTION="$1"
VULN_INFO="$2"
TIMEOUT="$3"

# Extract vulnerability details
CVE_ID=$(echo "$VULN_INFO" | grep -oE 'CVE-[0-9]{4}-[A-Z0-9]+' | head -1)
PACKAGE=$(echo "$VULN_INFO" | grep -oE 'PACKAGE:([^,[:space:]]+)' | cut -d: -f2)
SEVERITY=$(echo "$VULN_INFO" | grep -oE 'SEVERITY:([^,[:space:]]+)' | cut -d: -f2)

# Default values if not found
CVE_ID=${CVE_ID:-"CVE-UNKNOWN"}
PACKAGE=${PACKAGE:-"unknown-package"}
SEVERITY=${SEVERITY:-"MEDIUM"}

# Mitigation function
mitigate_vulnerability() {
    echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Mitigating vulnerability: $CVE_ID in $PACKAGE (Severity: $SEVERITY)" >> $LOG_FILE
    
    case "$SEVERITY" in
        "CRITICAL"|"HIGH")
            # Immediate action for critical vulnerabilities
            echo "$(date '+%Y/%m/%d %H:%M:%S') [CRITICAL] Immediate mitigation required for $CVE_ID" >> $LOG_FILE
            
            # Stop affected services
            if command -v systemctl >/dev/null 2>&1 && systemctl list-units --type=service --state=running | grep -q "$PACKAGE"; then
                systemctl stop "$PACKAGE" 2>/dev/null
                echo "$(date '+%Y/%m/%d %H:%M:%S') [ACTION] Stopped service: $PACKAGE" >> $LOG_FILE
            elif command -v service >/dev/null 2>&1; then
                service "$PACKAGE" stop 2>/dev/null
                echo "$(date '+%Y/%m/%d %H:%M:%S') [ACTION] Stopped service: $PACKAGE (via service command)" >> $LOG_FILE
            else
                echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Service management not available for: $PACKAGE" >> $LOG_FILE
            fi
            
            # Update package if possible
            if command -v apt-get >/dev/null 2>&1; then
                apt-get update >/dev/null 2>&1
                apt-get install --only-upgrade "$PACKAGE" -y >/dev/null 2>&1
                if [ $? -eq 0 ]; then
                    echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] Updated package: $PACKAGE" >> $LOG_FILE
                fi
            fi
            ;;
        "MEDIUM")
            # Schedule update for medium severity
            echo "$(date '+%Y/%m/%d %H:%M:%S') [MEDIUM] Scheduled mitigation for $CVE_ID" >> $LOG_FILE
            
            # Create update task
            echo "apt-get install --only-upgrade $PACKAGE -y" > /tmp/wazuh_vuln_update_$CVE_ID.sh
            chmod +x /tmp/wazuh_vuln_update_$CVE_ID.sh
            ;;
        "LOW")
            # Log for low severity
            echo "$(date '+%Y/%m/%d %H:%M:%S') [LOW] Vulnerability logged: $CVE_ID" >> $LOG_FILE
            ;;
    esac
    
    # Apply security hardening
    apply_hardening "$PACKAGE" "$CVE_ID"
    
    # Store mitigation info
    echo "$CVE_ID:$PACKAGE:$SEVERITY:$(date +%s):mitigated" >> /tmp/wazuh_mitigated_vulns.txt
    
    echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] Mitigation actions completed for $CVE_ID" >> $LOG_FILE
}

# Security hardening function
apply_hardening() {
    local package="$1"
    local cve="$2"
    
    echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Applying hardening for $package" >> $LOG_FILE
    
    case "$package" in
        "openssh-server"|"ssh")
            # SSH hardening
            if [ -f /etc/ssh/sshd_config ]; then
                cp /etc/ssh/sshd_config /etc/ssh/sshd_config.wazuh.bak
                
                # Apply secure settings
                sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
                sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
                sed -i 's/#MaxAuthTries 6/MaxAuthTries 3/' /etc/ssh/sshd_config
                
                systemctl reload sshd 2>/dev/null || service ssh reload 2>/dev/null || true
                echo "$(date '+%Y/%m/%d %H:%M:%S') [HARDENING] SSH configuration hardened" >> $LOG_FILE
            fi
            ;;
        "apache2"|"httpd")
            # Apache hardening
            if [ -d /etc/apache2 ]; then
                # Hide server information
                echo "ServerTokens Prod" >> /etc/apache2/conf-available/security.conf
                echo "ServerSignature Off" >> /etc/apache2/conf-available/security.conf
                
                systemctl reload apache2 2>/dev/null || service apache2 reload 2>/dev/null || true
                echo "$(date '+%Y/%m/%d %H:%M:%S') [HARDENING] Apache configuration hardened" >> $LOG_FILE
            fi
            ;;
        "nginx")
            # Nginx hardening
            if [ -d /etc/nginx ]; then
                # Hide server information
                echo "server_tokens off;" > /etc/nginx/conf.d/security.conf
                
                systemctl reload nginx 2>/dev/null || service nginx reload 2>/dev/null || true
                echo "$(date '+%Y/%m/%d %H:%M:%S') [HARDENING] Nginx configuration hardened" >> $LOG_FILE
            fi
            ;;
    esac
}

# Rollback function
rollback_mitigation() {
    echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Rolling back mitigation for: $CVE_ID" >> $LOG_FILE
    
    # Restore service if stopped
    if command -v systemctl >/dev/null 2>&1 && systemctl list-unit-files | grep -q "^$PACKAGE.service"; then
        systemctl start "$PACKAGE" 2>/dev/null
        echo "$(date '+%Y/%m/%d %H:%M:%S') [ROLLBACK] Restarted service: $PACKAGE" >> $LOG_FILE
    elif command -v service >/dev/null 2>&1; then
        service "$PACKAGE" start 2>/dev/null
        echo "$(date '+%Y/%m/%d %H:%M:%S') [ROLLBACK] Restarted service: $PACKAGE (via service command)" >> $LOG_FILE
    else
        echo "$(date '+%Y/%m/%d %H:%M:%S') [INFO] Service restart not available for: $PACKAGE" >> $LOG_FILE
    fi
    
    # Remove from tracking file
    grep -v "^$CVE_ID:" /tmp/wazuh_mitigated_vulns.txt > /tmp/wazuh_mitigated_vulns.tmp 2>/dev/null
    mv /tmp/wazuh_mitigated_vulns.tmp /tmp/wazuh_mitigated_vulns.txt 2>/dev/null
    
    echo "$(date '+%Y/%m/%d %H:%M:%S') [SUCCESS] Rollback completed for $CVE_ID" >> $LOG_FILE
}

# Main logic
case "$ACTION" in
    add)
        mitigate_vulnerability
        ;;
    delete)
        rollback_mitigation
        ;;
    *)
        echo "$(date '+%Y/%m/%d %H:%M:%S') [ERROR] Invalid action: $ACTION" >> $LOG_FILE
        exit 1
        ;;
esac

exit 0