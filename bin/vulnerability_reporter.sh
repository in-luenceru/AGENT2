#!/bin/bash

# Vulnerability Report Generator
# Creates comprehensive vulnerability reports and recommendations

AGENT_DIR="/workspaces/AGENT2"
SCAN_RESULTS="$AGENT_DIR/queue/vulnerabilities/scan_results.json"
SCAN_SUMMARY="$AGENT_DIR/queue/vulnerabilities/scan_summary.json"
REPORT_DIR="$AGENT_DIR/queue/vulnerabilities/reports"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Create reports directory
mkdir -p "$REPORT_DIR"

cd "$AGENT_DIR"

echo "=== Vulnerability Report Generator ==="

# Check if scan results exist
if [ ! -f "$SCAN_RESULTS" ]; then
    echo "No scan results found. Running vulnerability scan..."
    ./bin/vulnerability_scanner.sh
fi

# Parse summary data
if [ -f "$SCAN_SUMMARY" ]; then
    TOTAL_PACKAGES=$(jq -r '.total_packages_scanned' "$SCAN_SUMMARY")
    TOTAL_VULNS=$(jq -r '.total_vulnerabilities' "$SCAN_SUMMARY")
    CRITICAL_COUNT=$(jq -r '.vulnerabilities_by_severity.critical' "$SCAN_SUMMARY")
    HIGH_COUNT=$(jq -r '.vulnerabilities_by_severity.high' "$SCAN_SUMMARY")
    MEDIUM_COUNT=$(jq -r '.vulnerabilities_by_severity.medium' "$SCAN_SUMMARY")
    LOW_COUNT=$(jq -r '.vulnerabilities_by_severity.low' "$SCAN_SUMMARY")
    SCAN_TIME=$(jq -r '.scan_timestamp' "$SCAN_SUMMARY")
    RISK_LEVEL=$([ $CRITICAL_COUNT -gt 0 ] && echo "CRITICAL" || [ $HIGH_COUNT -gt 5 ] && echo "HIGH" || [ $MEDIUM_COUNT -gt 10 ] && echo "MEDIUM" || echo "LOW")
else
    echo "Summary file not found!"
    exit 1
fi

# Generate Executive Summary Report
cat << EOF > "$REPORT_DIR/executive_summary_$TIMESTAMP.md"
# Executive Vulnerability Assessment Report

**Report Generated:** $(date '+%Y-%m-%d %H:%M:%S')  
**Scan Timestamp:** $SCAN_TIME  
**Risk Level:** **$RISK_LEVEL**

## Summary

- **Total Packages Scanned:** $TOTAL_PACKAGES
- **Total Vulnerabilities Found:** $TOTAL_VULNS
- **Overall Risk Assessment:** $RISK_LEVEL

### Vulnerability Distribution

| Severity | Count | Percentage |
|----------|-------|------------|
| Critical | $CRITICAL_COUNT | $(echo "scale=1; $CRITICAL_COUNT * 100 / $TOTAL_VULNS" | bc -l 2>/dev/null || echo "0")% |
| High     | $HIGH_COUNT | $(echo "scale=1; $HIGH_COUNT * 100 / $TOTAL_VULNS" | bc -l 2>/dev/null || echo "0")% |
| Medium   | $MEDIUM_COUNT | $(echo "scale=1; $MEDIUM_COUNT * 100 / $TOTAL_VULNS" | bc -l 2>/dev/null || echo "0")% |
| Low      | $LOW_COUNT | $(echo "scale=1; $LOW_COUNT * 100 / $TOTAL_VULNS" | bc -l 2>/dev/null || echo "0")% |

## Critical Recommendations

$(if [ $CRITICAL_COUNT -gt 0 ]; then
echo "üö® **IMMEDIATE ACTION REQUIRED**"
echo "- $CRITICAL_COUNT critical vulnerabilities require immediate attention"
echo "- Schedule emergency maintenance window within 24 hours"
echo "- Consider isolating affected systems until patched"
fi)

$(if [ $HIGH_COUNT -gt 5 ]; then
echo "‚ö†Ô∏è  **HIGH PRIORITY**"
echo "- $HIGH_COUNT high-severity vulnerabilities detected"
echo "- Schedule urgent maintenance within 72 hours"
echo "- Prioritize internet-facing and critical systems"
fi)

$(if [ $MEDIUM_COUNT -gt 10 ]; then
echo "üìã **PLANNED MAINTENANCE**"
echo "- $MEDIUM_COUNT medium-severity vulnerabilities require attention"
echo "- Include in next scheduled maintenance window"
echo "- Monitor for proof-of-concept exploits"
fi)

## Next Steps

1. Review detailed vulnerability report
2. Prioritize patching based on system criticality
3. Implement compensating controls where immediate patching isn't possible
4. Schedule next vulnerability scan for $(date -d '+1 day' '+%Y-%m-%d')

EOF

# Generate Detailed Technical Report
cat << EOF > "$REPORT_DIR/detailed_report_$TIMESTAMP.md"
# Detailed Vulnerability Assessment Report

**Report Generated:** $(date '+%Y-%m-%d %H:%M:%S')  
**Scan Timestamp:** $SCAN_TIME

## Critical Vulnerabilities ($CRITICAL_COUNT found)

EOF

# Extract critical vulnerabilities
if [ -f "$SCAN_RESULTS" ] && command -v jq >/dev/null 2>&1; then
    jq -r '.[] | select(.severity == "CRITICAL") | "### \(.cve) - \(.package) \(.version)\n**Severity:** \(.severity) (CVSS: \(.cvss_score))  \n**Description:** \(.description)  \n**Recommendation:** \(.recommendation)  \n**Risk Level:** \(.risk_level)\n"' "$SCAN_RESULTS" >> "$REPORT_DIR/detailed_report_$TIMESTAMP.md"
else
    echo "Unable to parse detailed vulnerability data" >> "$REPORT_DIR/detailed_report_$TIMESTAMP.md"
fi

cat << EOF >> "$REPORT_DIR/detailed_report_$TIMESTAMP.md"

## High Severity Vulnerabilities ($HIGH_COUNT found)

EOF

# Extract high severity vulnerabilities (limit to first 10 for readability)
if [ -f "$SCAN_RESULTS" ] && command -v jq >/dev/null 2>&1; then
    jq -r '.[] | select(.severity == "HIGH") | "### \(.cve) - \(.package) \(.version)\n**Severity:** \(.severity) (CVSS: \(.cvss_score))  \n**Description:** \(.description)  \n**Recommendation:** \(.recommendation)\n"' "$SCAN_RESULTS" | head -50 >> "$REPORT_DIR/detailed_report_$TIMESTAMP.md"
fi

# Generate CSV export for tracking
cat << EOF > "$REPORT_DIR/vulnerabilities_$TIMESTAMP.csv"
CVE,Package,Version,Severity,CVSS_Score,Description,Risk_Level,Recommendation,Timestamp
EOF

if [ -f "$SCAN_RESULTS" ] && command -v jq >/dev/null 2>&1; then
    jq -r '.[] | "\(.cve),\(.package),\(.version),\(.severity),\(.cvss_score),\(.description | gsub(","; ";") | gsub("\n"; " ")),\(.risk_level),\(.recommendation | gsub(","; ";") | gsub("\n"; " ")),\(.timestamp)"' "$SCAN_RESULTS" >> "$REPORT_DIR/vulnerabilities_$TIMESTAMP.csv"
fi

# Generate Package Priority Report
cat << EOF > "$REPORT_DIR/package_priority_$TIMESTAMP.txt"
Package Vulnerability Priority Report
Generated: $(date '+%Y-%m-%d %H:%M:%S')

CRITICAL PACKAGES (requiring immediate attention):
EOF

if [ -f "$SCAN_RESULTS" ] && command -v jq >/dev/null 2>&1; then
    jq -r '.[] | select(.severity == "CRITICAL") | .package' "$SCAN_RESULTS" | sort | uniq -c | sort -nr >> "$REPORT_DIR/package_priority_$TIMESTAMP.txt"
fi

cat << EOF >> "$REPORT_DIR/package_priority_$TIMESTAMP.txt"

HIGH PRIORITY PACKAGES:
EOF

if [ -f "$SCAN_RESULTS" ] && command -v jq >/dev/null 2>&1; then
    jq -r '.[] | select(.severity == "HIGH") | .package' "$SCAN_RESULTS" | sort | uniq -c | sort -nr | head -20 >> "$REPORT_DIR/package_priority_$TIMESTAMP.txt"
fi

# Display results
echo ""
echo "Reports generated successfully:"
echo "  Executive Summary: $REPORT_DIR/executive_summary_$TIMESTAMP.md"
echo "  Detailed Report: $REPORT_DIR/detailed_report_$TIMESTAMP.md"
echo "  CSV Export: $REPORT_DIR/vulnerabilities_$TIMESTAMP.csv"
echo "  Package Priority: $REPORT_DIR/package_priority_$TIMESTAMP.txt"
echo ""
echo "Risk Assessment: $RISK_LEVEL"
echo "Total Vulnerabilities: $TOTAL_VULNS ($CRITICAL_COUNT critical, $HIGH_COUNT high, $MEDIUM_COUNT medium)"

# Create latest symlinks
ln -sf "executive_summary_$TIMESTAMP.md" "$REPORT_DIR/latest_executive_summary.md"
ln -sf "detailed_report_$TIMESTAMP.md" "$REPORT_DIR/latest_detailed_report.md"
ln -sf "vulnerabilities_$TIMESTAMP.csv" "$REPORT_DIR/latest_vulnerabilities.csv"

echo ""
echo "Latest reports available at:"
echo "  $REPORT_DIR/latest_executive_summary.md"
echo "  $REPORT_DIR/latest_detailed_report.md"
echo "  $REPORT_DIR/latest_vulnerabilities.csv"