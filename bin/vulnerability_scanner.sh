#!/bin/bash

# Vulnerability Scanner Integration Script
# Correlates installed packages with CVE database for real-time vulnerability detection

AGENT_DIR="/workspaces/AGENT2"
CVE_DB="$AGENT_DIR/etc/shared/cve/cve_database.txt"
PKG_VULN="$AGENT_DIR/etc/shared/cve/package_vulnerabilities.txt"
SEVERITY_RULES="$AGENT_DIR/etc/shared/cve/severity_rules.txt"
VULN_LOG="$AGENT_DIR/logs/vulnerabilities.log"
SCAN_RESULTS="$AGENT_DIR/queue/vulnerabilities/scan_results.json"

cd "$AGENT_DIR"

# Initialize logging
echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting vulnerability scan" >> "$VULN_LOG"

# Function to get installed packages
get_installed_packages() {
    if command -v dpkg >/dev/null 2>&1; then
        # Debian/Ubuntu systems
        dpkg -l | grep '^ii' | awk '{print $2 ":" $3}' 
    elif command -v rpm >/dev/null 2>&1; then
        # RedHat/CentOS systems  
        rpm -qa --qf "%{NAME}:%{VERSION}\n"
    elif command -v apk >/dev/null 2>&1; then
        # Alpine systems
        apk list -I | sed 's/ /:/g'
    else
        # Fallback - simulate package list for demo
        echo "openssh-server:8.9p1"
        echo "apache2:2.4.52"
        echo "nginx:1.18.0"
        echo "curl:7.81.0"
        echo "openssl:3.0.2"
        echo "git:2.34.1"
        echo "sudo:1.9.9"
        echo "linux-image-5.15.0:5.15.0-72"
        echo "glibc:2.35"
        echo "libxml2:2.9.13"
    fi
}

# Function to check package against vulnerability database
check_package_vulnerabilities() {
    local package="$1"
    local package_name=$(echo "$package" | cut -d':' -f1)
    local package_version=$(echo "$package" | cut -d':' -f2)
    
    # Check against package vulnerability patterns
    while IFS='|' read -r pattern cve_list risk_level recommendation; do
        if [[ "$package_name" =~ $pattern ]]; then
            IFS=',' read -ra CVE_ARRAY <<< "$cve_list"
            for cve in "${CVE_ARRAY[@]}"; do
                # Get CVE details from database
                cve_line=$(grep "^$cve|" "$CVE_DB" 2>/dev/null)
                if [ -n "$cve_line" ]; then
                    IFS='|' read -r cve_id severity cvss_score affected_packages description <<< "$cve_line"
                    
                    # Generate vulnerability finding
                    cat << EOF >> "$SCAN_RESULTS.tmp"
{
  "timestamp": "$(date -Iseconds)",
  "package": "$package_name",
  "version": "$package_version", 
  "cve": "$cve_id",
  "severity": "$severity",
  "cvss_score": "$cvss_score",
  "description": "$description",
  "risk_level": "$risk_level",
  "recommendation": "$recommendation",
  "status": "VULNERABLE"
},
EOF

                    # Log finding
                    echo "$(date '+%Y-%m-%d %H:%M:%S') - VULNERABILITY: $package_name:$package_version affected by $cve_id (Severity: $severity, CVSS: $cvss_score)" >> "$VULN_LOG"
                    
                    # Count vulnerabilities by severity
                    case "$severity" in
                        "CRITICAL") ((CRITICAL_COUNT++)) ;;
                        "HIGH") ((HIGH_COUNT++)) ;;
                        "MEDIUM") ((MEDIUM_COUNT++)) ;;
                        "LOW") ((LOW_COUNT++)) ;;
                    esac
                fi
            done
        fi
    done < "$PKG_VULN"
}

# Initialize counters
CRITICAL_COUNT=0
HIGH_COUNT=0
MEDIUM_COUNT=0
LOW_COUNT=0
TOTAL_PACKAGES=0

# Start JSON array
echo "[" > "$SCAN_RESULTS.tmp"

echo "=== Vulnerability Scan Started ==="
echo "Scanning installed packages against CVE database..."

# Get packages and check vulnerabilities
while IFS= read -r package; do
    ((TOTAL_PACKAGES++))
    check_package_vulnerabilities "$package"
done < <(get_installed_packages)

# Complete JSON array (remove trailing comma and close)
if [ -s "$SCAN_RESULTS.tmp" ]; then
    sed '$ s/,$//' "$SCAN_RESULTS.tmp" > "$SCAN_RESULTS.tmp2"
    mv "$SCAN_RESULTS.tmp2" "$SCAN_RESULTS.tmp"
fi
echo "]" >> "$SCAN_RESULTS.tmp"
mv "$SCAN_RESULTS.tmp" "$SCAN_RESULTS"

# Generate summary report
TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))

cat << EOF > "$AGENT_DIR/queue/vulnerabilities/scan_summary.json"
{
  "scan_timestamp": "$(date -Iseconds)",
  "scan_type": "package_vulnerability_scan",
  "total_packages_scanned": $TOTAL_PACKAGES,
  "total_vulnerabilities": $TOTAL_VULNS,
  "vulnerabilities_by_severity": {
    "critical": $CRITICAL_COUNT,
    "high": $HIGH_COUNT,
    "medium": $MEDIUM_COUNT,
    "low": $LOW_COUNT
  },
  "risk_assessment": "$([ $CRITICAL_COUNT -gt 0 ] && echo "CRITICAL" || [ $HIGH_COUNT -gt 5 ] && echo "HIGH" || [ $MEDIUM_COUNT -gt 10 ] && echo "MEDIUM" || echo "LOW")",
  "next_scan": "$(date -d '+1 day' -Iseconds)",
  "scan_results_file": "$SCAN_RESULTS"
}
EOF

# Generate alerts based on thresholds
if [ $CRITICAL_COUNT -ge 3 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ALERT: $CRITICAL_COUNT critical vulnerabilities detected!" >> "$VULN_LOG"
    
    # Generate Wazuh alert format
    cat << EOF > "$AGENT_DIR/logs/vulnerability_alert.log"
$(date '+%b %d %H:%M:%S') $(hostname) vulnerability_scanner: CRITICAL ALERT: $CRITICAL_COUNT critical vulnerabilities detected requiring immediate attention
EOF
fi

if [ $HIGH_COUNT -ge 10 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ALERT: $HIGH_COUNT high-severity vulnerabilities detected!" >> "$VULN_LOG"
    
    cat << EOF >> "$AGENT_DIR/logs/vulnerability_alert.log"
$(date '+%b %d %H:%M:%S') $(hostname) vulnerability_scanner: HIGH ALERT: $HIGH_COUNT high-severity vulnerabilities require urgent attention
EOF
fi

# Display results
echo ""
echo "=== Vulnerability Scan Results ==="
echo "Total packages scanned: $TOTAL_PACKAGES"
echo "Total vulnerabilities found: $TOTAL_VULNS"
echo ""
echo "Vulnerabilities by severity:"
echo "  Critical: $CRITICAL_COUNT"
echo "  High: $HIGH_COUNT" 
echo "  Medium: $MEDIUM_COUNT"
echo "  Low: $LOW_COUNT"
echo ""
echo "Scan results saved to: $SCAN_RESULTS"
echo "Scan summary saved to: $AGENT_DIR/queue/vulnerabilities/scan_summary.json"
echo "Scan completed at: $(date)"

# Log completion
echo "$(date '+%Y-%m-%d %H:%M:%S') - Vulnerability scan completed. Found $TOTAL_VULNS vulnerabilities in $TOTAL_PACKAGES packages" >> "$VULN_LOG"