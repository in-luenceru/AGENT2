#!/bin/bash
# Enhanced Wazuh Agent Control Script

AGENT_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export WAZUH_HOME="$AGENT_HOME"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to start agent components
start_agent() {
    log_info "Starting Wazuh agent components..."
    
    # Create necessary directories
    mkdir -p "$AGENT_HOME/var/run"
    mkdir -p "$AGENT_HOME/logs"
    
    # Start components in order
    components=("monitor-agentd" "monitor-logcollector" "monitor-syscheckd" "monitor-execd" "monitor-modulesd")
    
    for component in "${components[@]}"; do
        if ! pgrep -f "$component" > /dev/null; then
            log_info "Starting $component..."
            "$AGENT_HOME/bin/$component" -f &
            sleep 2
            if pgrep -f "$component" > /dev/null; then
                log_success "$component started successfully"
            else
                log_error "Failed to start $component"
            fi
        else
            log_warning "$component is already running"
        fi
    done
}

# Function to stop agent components
stop_agent() {
    log_info "Stopping Wazuh agent components..."
    
    components=("monitor-modulesd" "monitor-execd" "monitor-syscheckd" "monitor-logcollector" "monitor-agentd")
    
    for component in "${components[@]}"; do
        if pgrep -f "$component" > /dev/null; then
            log_info "Stopping $component..."
            pkill -f "$component"
            sleep 2
        fi
    done
    
    log_success "All agent components stopped"
}

# Function to show agent status
status_agent() {
    log_info "Wazuh Agent Status:"
    echo
    
    components=("monitor-agentd" "monitor-logcollector" "monitor-syscheckd" "monitor-execd" "monitor-modulesd")
    
    for component in "${components[@]}"; do
        if pgrep -f "$component" > /dev/null; then
            pid=$(pgrep -f "$component")
            echo -e "  ${GREEN}✓${NC} $component (PID: $pid)"
        else
            echo -e "  ${RED}✗${NC} $component (not running)"
        fi
    done
    
    echo
    log_info "Manager connection test:"
    if nc -z 127.0.0.1 1514; then
        echo -e "  ${GREEN}✓${NC} Manager reachable on 127.0.0.1:1514"
    else
        echo -e "  ${RED}✗${NC} Manager not reachable on 127.0.0.1:1514"
    fi
}

# Function to restart agent
restart_agent() {
    log_info "Restarting Wazuh agent..."
    stop_agent
    sleep 3
    start_agent
}

# Function to test agent
test_agent() {
    log_info "Testing agent configuration and connectivity..."
    
    # Test configuration syntax
    if [[ -f "$AGENT_HOME/etc/ossec.conf" ]]; then
        log_success "Configuration file found"
    else
        log_error "Configuration file not found"
        return 1
    fi
    
    # Test client keys
    if [[ -f "$AGENT_HOME/etc/client.keys" ]]; then
        log_success "Client keys found"
    else
        log_error "Client keys not found"
        return 1
    fi
    
    # Test manager connectivity
    if nc -z 127.0.0.1 1514; then
        log_success "Manager connectivity OK"
    else
        log_error "Cannot connect to manager"
        return 1
    fi
    
    log_success "Agent test completed successfully"
}

# Main command handling
case "$1" in
    start)
        start_agent
        ;;
    stop)
        stop_agent
        ;;
    status)
        status_agent
        ;;
    restart)
        restart_agent
        ;;
    test)
        test_agent
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart|test}"
        echo
        echo "Commands:"
        echo "  start   - Start all agent components"
        echo "  stop    - Stop all agent components"
        echo "  status  - Show agent status"
        echo "  restart - Restart all agent components"
        echo "  test    - Test agent configuration and connectivity"
        exit 1
        ;;
esac
